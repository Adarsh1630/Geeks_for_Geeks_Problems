class Solution
{
     public static long maxRectangle(long arr[]) //O(n)
    {
        long MaxArea=0;
        long nsr[]=new long[arr.length];
        long nsl[]=new long[arr.length];

        //Next Smaller right

        Stack<Integer> s=new Stack<>();

        for(int i=arr.length-1;i>=0;i--) //O(n)
        {
            while(!s.isEmpty() && arr[s.peek()] >= arr[i])
            {
               s.pop();
            }

            if(s.isEmpty())
            {
                nsr[i]=arr.length;
            }
            else{
                nsr[i]=s.peek();
            }

            s.push(i);
        }
        

        //Next Smaller left
         
        s=new Stack<>();
        for(int i=0;i<arr.length;i++) //O(n)
        {
            while(!s.isEmpty() && arr[s.peek()] >= arr[i])
            {
               s.pop();
            }

            if(s.isEmpty())
            {
                nsl[i]=-1;
            }
            else{
                nsl[i]=s.peek();
            }

            s.push(i);
        }


        //Max Area

        for(int i=0;i<arr.length;i++) //O(n)
        {
            long heigth=arr[i];
            long width=nsr[i]-nsl[i]-1;
            long currArea=heigth*width;

            MaxArea=Math.max(currArea, MaxArea);
        }

        return MaxArea;

    }

    
    
    //Function to find largest rectangular area possible in a given histogram.
    public static long getMaxArea(long hist[], long n) 
    {
        // your code here
        return maxRectangle(hist);
    }
        
}
